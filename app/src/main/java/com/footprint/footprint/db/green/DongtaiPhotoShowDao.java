package com.footprint.footprint.db.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.footprint.footprint.dbbean.DongtaiPhotoShow;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DONGTAI_PHOTO_SHOW".
*/
public class DongtaiPhotoShowDao extends AbstractDao<DongtaiPhotoShow, Long> {

    public static final String TABLENAME = "DONGTAI_PHOTO_SHOW";

    /**
     * Properties of entity DongtaiPhotoShow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Beizhu1 = new Property(5, String.class, "beizhu1", false, "BEIZHU1");
        public final static Property Beizhu2 = new Property(6, String.class, "beizhu2", false, "BEIZHU2");
        public final static Property Beizhu3 = new Property(7, String.class, "beizhu3", false, "BEIZHU3");
        public final static Property Beizhu4 = new Property(8, String.class, "beizhu4", false, "BEIZHU4");
    }


    public DongtaiPhotoShowDao(DaoConfig config) {
        super(config);
    }
    
    public DongtaiPhotoShowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DONGTAI_PHOTO_SHOW\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TITLE\" TEXT," + // 2: title
                "\"CODE\" TEXT," + // 3: code
                "\"TIME\" TEXT," + // 4: time
                "\"BEIZHU1\" TEXT," + // 5: beizhu1
                "\"BEIZHU2\" TEXT," + // 6: beizhu2
                "\"BEIZHU3\" TEXT," + // 7: beizhu3
                "\"BEIZHU4\" TEXT);"); // 8: beizhu4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DONGTAI_PHOTO_SHOW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DongtaiPhotoShow entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String beizhu1 = entity.getBeizhu1();
        if (beizhu1 != null) {
            stmt.bindString(6, beizhu1);
        }
 
        String beizhu2 = entity.getBeizhu2();
        if (beizhu2 != null) {
            stmt.bindString(7, beizhu2);
        }
 
        String beizhu3 = entity.getBeizhu3();
        if (beizhu3 != null) {
            stmt.bindString(8, beizhu3);
        }
 
        String beizhu4 = entity.getBeizhu4();
        if (beizhu4 != null) {
            stmt.bindString(9, beizhu4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DongtaiPhotoShow entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String beizhu1 = entity.getBeizhu1();
        if (beizhu1 != null) {
            stmt.bindString(6, beizhu1);
        }
 
        String beizhu2 = entity.getBeizhu2();
        if (beizhu2 != null) {
            stmt.bindString(7, beizhu2);
        }
 
        String beizhu3 = entity.getBeizhu3();
        if (beizhu3 != null) {
            stmt.bindString(8, beizhu3);
        }
 
        String beizhu4 = entity.getBeizhu4();
        if (beizhu4 != null) {
            stmt.bindString(9, beizhu4);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DongtaiPhotoShow readEntity(Cursor cursor, int offset) {
        DongtaiPhotoShow entity = new DongtaiPhotoShow( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // beizhu1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // beizhu2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // beizhu3
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // beizhu4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DongtaiPhotoShow entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBeizhu1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBeizhu2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBeizhu3(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBeizhu4(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DongtaiPhotoShow entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DongtaiPhotoShow entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DongtaiPhotoShow entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
